// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.12.4
// source: playplay.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "spotify.playplay.proto";

export enum Interactivity {
  UNKNOWN_INTERACTIVITY = 0,
  INTERACTIVE = 1,
  DOWNLOAD = 2,
  UNRECOGNIZED = -1,
}

export function interactivityFromJSON(object: any): Interactivity {
  switch (object) {
    case 0:
    case "UNKNOWN_INTERACTIVITY":
      return Interactivity.UNKNOWN_INTERACTIVITY;
    case 1:
    case "INTERACTIVE":
      return Interactivity.INTERACTIVE;
    case 2:
    case "DOWNLOAD":
      return Interactivity.DOWNLOAD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Interactivity.UNRECOGNIZED;
  }
}

export function interactivityToJSON(object: Interactivity): string {
  switch (object) {
    case Interactivity.UNKNOWN_INTERACTIVITY:
      return "UNKNOWN_INTERACTIVITY";
    case Interactivity.INTERACTIVE:
      return "INTERACTIVE";
    case Interactivity.DOWNLOAD:
      return "DOWNLOAD";
    case Interactivity.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ContentType {
  UNKNOWN_CONTENT_TYPE = 0,
  AUDIO_TRACK = 1,
  AUDIO_EPISODE = 2,
  AUDIO_ADD = 3,
  UNRECOGNIZED = -1,
}

export function contentTypeFromJSON(object: any): ContentType {
  switch (object) {
    case 0:
    case "UNKNOWN_CONTENT_TYPE":
      return ContentType.UNKNOWN_CONTENT_TYPE;
    case 1:
    case "AUDIO_TRACK":
      return ContentType.AUDIO_TRACK;
    case 2:
    case "AUDIO_EPISODE":
      return ContentType.AUDIO_EPISODE;
    case 3:
    case "AUDIO_ADD":
      return ContentType.AUDIO_ADD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContentType.UNRECOGNIZED;
  }
}

export function contentTypeToJSON(object: ContentType): string {
  switch (object) {
    case ContentType.UNKNOWN_CONTENT_TYPE:
      return "UNKNOWN_CONTENT_TYPE";
    case ContentType.AUDIO_TRACK:
      return "AUDIO_TRACK";
    case ContentType.AUDIO_EPISODE:
      return "AUDIO_EPISODE";
    case ContentType.AUDIO_ADD:
      return "AUDIO_ADD";
    case ContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PlayPlayLicenseRequest {
  version?: number | undefined;
  token?: Uint8Array | undefined;
  cacheId?: Uint8Array | undefined;
  interactivity?: Interactivity | undefined;
  contentType?: ContentType | undefined;
  timestamp?: Long | undefined;
}

export interface PlayPlayLicenseResponse {
  obfuscatedKey?: Uint8Array | undefined;
}

function createBasePlayPlayLicenseRequest(): PlayPlayLicenseRequest {
  return {
    version: 0,
    token: new Uint8Array(0),
    cacheId: new Uint8Array(0),
    interactivity: 0,
    contentType: 0,
    timestamp: Long.ZERO,
  };
}

export const PlayPlayLicenseRequest = {
  encode(message: PlayPlayLicenseRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.version !== undefined && message.version !== 0) {
      writer.uint32(8).int32(message.version);
    }
    if (message.token !== undefined && message.token.length !== 0) {
      writer.uint32(18).bytes(message.token);
    }
    if (message.cacheId !== undefined && message.cacheId.length !== 0) {
      writer.uint32(26).bytes(message.cacheId);
    }
    if (message.interactivity !== undefined && message.interactivity !== 0) {
      writer.uint32(32).int32(message.interactivity);
    }
    if (message.contentType !== undefined && message.contentType !== 0) {
      writer.uint32(40).int32(message.contentType);
    }
    if (message.timestamp !== undefined && !message.timestamp.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayPlayLicenseRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayPlayLicenseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.version = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cacheId = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.interactivity = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.contentType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.timestamp = reader.int64() as Long;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayPlayLicenseRequest {
    return {
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      token: isSet(object.token) ? bytesFromBase64(object.token) : new Uint8Array(0),
      cacheId: isSet(object.cacheId) ? bytesFromBase64(object.cacheId) : new Uint8Array(0),
      interactivity: isSet(object.interactivity) ? interactivityFromJSON(object.interactivity) : 0,
      contentType: isSet(object.contentType) ? contentTypeFromJSON(object.contentType) : 0,
      timestamp: isSet(object.timestamp) ? Long.fromValue(object.timestamp) : Long.ZERO,
    };
  },

  toJSON(message: PlayPlayLicenseRequest): unknown {
    const obj: any = {};
    if (message.version !== undefined && message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.token !== undefined && message.token.length !== 0) {
      obj.token = base64FromBytes(message.token);
    }
    if (message.cacheId !== undefined && message.cacheId.length !== 0) {
      obj.cacheId = base64FromBytes(message.cacheId);
    }
    if (message.interactivity !== undefined && message.interactivity !== 0) {
      obj.interactivity = interactivityToJSON(message.interactivity);
    }
    if (message.contentType !== undefined && message.contentType !== 0) {
      obj.contentType = contentTypeToJSON(message.contentType);
    }
    if (message.timestamp !== undefined && !message.timestamp.equals(Long.ZERO)) {
      obj.timestamp = (message.timestamp || Long.ZERO).toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayPlayLicenseRequest>, I>>(base?: I): PlayPlayLicenseRequest {
    return PlayPlayLicenseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayPlayLicenseRequest>, I>>(object: I): PlayPlayLicenseRequest {
    const message = createBasePlayPlayLicenseRequest();
    message.version = object.version ?? 0;
    message.token = object.token ?? new Uint8Array(0);
    message.cacheId = object.cacheId ?? new Uint8Array(0);
    message.interactivity = object.interactivity ?? 0;
    message.contentType = object.contentType ?? 0;
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Long.fromValue(object.timestamp)
      : Long.ZERO;
    return message;
  },
};

function createBasePlayPlayLicenseResponse(): PlayPlayLicenseResponse {
  return { obfuscatedKey: new Uint8Array(0) };
}

export const PlayPlayLicenseResponse = {
  encode(message: PlayPlayLicenseResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.obfuscatedKey !== undefined && message.obfuscatedKey.length !== 0) {
      writer.uint32(10).bytes(message.obfuscatedKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayPlayLicenseResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayPlayLicenseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.obfuscatedKey = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayPlayLicenseResponse {
    return { obfuscatedKey: isSet(object.obfuscatedKey) ? bytesFromBase64(object.obfuscatedKey) : new Uint8Array(0) };
  },

  toJSON(message: PlayPlayLicenseResponse): unknown {
    const obj: any = {};
    if (message.obfuscatedKey !== undefined && message.obfuscatedKey.length !== 0) {
      obj.obfuscatedKey = base64FromBytes(message.obfuscatedKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayPlayLicenseResponse>, I>>(base?: I): PlayPlayLicenseResponse {
    return PlayPlayLicenseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayPlayLicenseResponse>, I>>(object: I): PlayPlayLicenseResponse {
    const message = createBasePlayPlayLicenseResponse();
    message.obfuscatedKey = object.obfuscatedKey ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
